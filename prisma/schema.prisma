generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index(userId)
}

model Address {
  id              String           @id @default(cuid())
  userId          String
  street          String           @db.VarChar(100)
  city            String           @db.VarChar(100)
  state           String           @db.VarChar(100)
  zip             String           @db.VarChar(10)
  country         String           @db.VarChar(100)
  latitude        Float?
  longitude       Float?
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  serviceRequests ServiceRequest[]
  serviceLogs     ServiceLog[]
  subscription    Subscription?

  @@index(userId)
}

model BillingCycle {
  id              String           @id @default(cuid())
  userId          String
  subscriptionId  String
  startDate       DateTime
  endDate         DateTime
  amount          Float
  paid            Boolean          @default(false)
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments        Payment[]
  serviceRequests ServiceRequest[]
  serviceLogs     ServiceLog[]
  subscriptions   Subscription[]

  @@index(userId)
  @@index(subscriptionId)
}

model Message {
  id        String    @id @default(cuid())
  name      String    @db.VarChar(100)
  email     String    @db.VarChar(100)
  phone     String?   @db.VarChar(20)
  city      String?   @db.VarChar(100)
  message   String    @db.VarChar(2000)
  read      Boolean   @default(false)
  sent      Boolean   @default(false)
  parentId  String?
  parent    Message?  @relation("MessageParent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children  Message[] @relation("MessageParent")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index(parentId)
}

model Payment {
  id              String        @id @default(cuid())
  userId          String
  paymentMethodId String
  billingCycleId  String
  amount          Float
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deleted         Boolean       @default(false)
  paymentIntent   String
  status          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  billingCycle    BillingCycle  @relation(fields: [billingCycleId], references: [id], onDelete: Cascade)
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id], onDelete: Cascade)

  @@index(userId)
  @@index(paymentMethodId)
  @@index(billingCycleId)
}

model Service {
  id              String           @id @default(cuid())
  stripeId        String?          @db.VarChar(30)
  type            ServiceType      @default(recurring)
  name            String
  description     String           @db.VarChar(2000)
  price           Float
  priceId         String?          @db.VarChar(50)
  perCycle        Int?
  featured        Boolean          @default(false)
  displayed       Boolean          @default(true)
  productPhoto    String           @default("/images/products/generic-pickup.jpg") @db.VarChar(1000)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deleted         Boolean          @default(false)
  serviceRequests ServiceRequest[]
  serviceLogs     ServiceLog[]
  subscriptions   Subscription[]
}

model ServiceRequest {
  id             String       @id @default(cuid())
  serviceId      String
  billingCycleId String
  addressId      String
  requestDate    DateTime
  instructions   String?      @db.VarChar(2000)
  completed      Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deleted        Boolean      @default(false)
  service        Service      @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  billingCycle   BillingCycle @relation(fields: [billingCycleId], references: [id], onDelete: Cascade)
  address        Address      @relation(fields: [addressId], references: [id], onDelete: Cascade)

  @@index(serviceId)
  @@index(billingCycleId)
  @@index(addressId)
}

model ServiceLog {
  id             String       @id @default(cuid())
  serviceId      String
  billingCycleId String
  addressId      String
  notes          String?      @db.VarChar(2000)
  photo          String?
  completed      Boolean      @default(false)
  notified       Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deleted        Boolean      @default(false)
  service        Service      @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  billingCycle   BillingCycle @relation(fields: [billingCycleId], references: [id], onDelete: Cascade)
  address        Address      @relation(fields: [addressId], references: [id], onDelete: Cascade)

  @@index(serviceId)
  @@index(billingCycleId)
  @@index(addressId)
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index(userId)
}

model Subscription {
  id             String        @id @default(cuid())
  userId         String
  serviceId      String
  addressId      String        @unique
  active         Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  deleted        Boolean       @default(false)
  billingCycleId String?
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  address        Address       @relation(fields: [addressId], references: [id], onDelete: Cascade)
  service        Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  billingCycle   BillingCycle? @relation(fields: [billingCycleId], references: [id])

  @@index(userId)
  @@index(serviceId)
  @@index(addressId)
  @@index(billingCycleId)
}

model User {
  id                String          @id @default(cuid())
  name              String?
  email             String?         @unique
  emailVerified     DateTime?
  image             String?
  role              RoleEnum        @default(subscriber)
  stripeId          String?         @db.VarChar(30)
  deleted           Boolean         @default(false)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now()) @updatedAt
  accounts          Account[]
  addresses         Address[]
  billingCycles     BillingCycle[]
  payments          Payment[]
  sessions          Session[]
  subscriptions     Subscription[]
  paymentMethods    PaymentMethod[]

  @@index([id, name, email])
}

model PaymentMethod {
  id        String    @id @default(cuid())
  userId    String
  stripeId  String    @unique
  last4     String?
  expMonth  Int?
  expYear   Int?
  brand     String?
  default   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   Boolean   @default(false)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments  Payment[]

  @@index(userId)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ServiceType {
  recurring
  oneTime
  addOn
}

enum RoleEnum {
  subscriber
  provider
  admin
  superadmin
}
