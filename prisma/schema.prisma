generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

//// Uncomment in development to generate erd document
//// This breaks deployments for some reason
// generator erd {
//   provider = "prisma-erd-generator"
// }

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Address {
  id               String             @id @default(cuid())
  type             AddressType        @default(service)
  userId           String
  street           String             @db.VarChar(100)
  street2          String?            @db.VarChar(100)
  city             String             @db.VarChar(100)
  state            String             @db.VarChar(100)
  zip              String             @db.VarChar(10)
  country          String             @db.VarChar(100)
  latitude         Float?
  longitude        Float?
  inServiceArea    Boolean            @default(false)
  pickupsAllocated Int                @default(0)
  instructions     String?            @db.VarChar(2000)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  user             User               @relation("addressUser", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  billingUser      User?              @relation("billingAddress")
  serviceRequests  ServiceRequest[]
  serviceLogs      ServiceLog[]
  Provider         Provider[]
  PickupPreference PickupPreference[]
  PickupSchedule   PickupSchedule[]

  @@index([userId])
}

model PickupPreference {
  id         String  @id @default(cuid())
  userId     String
  addressId  String
  weekNumber Int
  weekday    Weekday
  address    Address @relation(fields: [addressId], references: [id], onDelete: Cascade)
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([addressId, weekNumber, weekday, userId])
  @@index([addressId])
  @@index([userId])
}

model PickupSchedule {
  id         String   @id @default(cuid())
  userId     String
  addressId  String
  providerId String
  dateTime   DateTime
  address    Address  @relation(fields: [addressId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider   Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@index([addressId])
  @@index([userId])
  @@index([providerId])
}

model BillingCycle {
  id              String           @id @default(cuid())
  userId          String           @unique
  subscriptionId  String
  startDate       DateTime
  endDate         DateTime
  amount          Float
  active          Boolean          @default(true)
  pickups         Int              @default(0)
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments        Payment[]
  serviceRequests ServiceRequest[]
  serviceLogs     ServiceLog[]

  @@index([userId])
  @@index([subscriptionId])
}

model Message {
  id        String    @id @default(cuid())
  name      String    @db.VarChar(100)
  email     String    @db.VarChar(100)
  phone     String?   @db.VarChar(20)
  city      String?   @db.VarChar(100)
  message   String    @db.VarChar(2000)
  read      Boolean   @default(false)
  sent      Boolean   @default(false)
  parentId  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  parent    Message?  @relation("MessageParent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children  Message[] @relation("MessageParent")

  @@index([parentId])
}

model Payment {
  id              String        @id @default(cuid())
  userId          String
  paymentMethodId String
  billingCycleId  String
  amount          Float
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deleted         Boolean       @default(false)
  paymentIntent   String
  status          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  billingCycle    BillingCycle  @relation(fields: [billingCycleId], references: [id], onDelete: Cascade)
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([paymentMethodId])
  @@index([billingCycleId])
}

model Provider {
  id             String            @id @default(cuid())
  userId         String
  addressId      String
  serviceRadius  Int
  availability   Json?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  deleted        Boolean           @default(false)
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  address        Address           @relation(fields: [addressId], references: [id], onDelete: Cascade)
  timeOff        ProviderTimeOff[]
  PickupSchedule PickupSchedule[]
  ServiceRequest ServiceRequest[]
  ServiceLog     ServiceLog[]

  @@index([userId])
  @@index([addressId])
}

model ProviderTimeOff {
  id         String    @id @default(cuid())
  providerId String
  day        DateTime  @db.Date
  allDay     Boolean   @default(true)
  startTime  DateTime?
  endTime    DateTime?

  provider Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@index([providerId])
}

model Service {
  id                   String                 @id @default(cuid())
  stripeId             String?                @db.VarChar(30)
  type                 ServiceType            @default(pickup_recurring)
  name                 String
  description          String                 @db.VarChar(2000)
  price                Float
  priceId              String?                @db.VarChar(50)
  perCycle             Int?
  featured             Boolean                @default(false)
  displayed            Boolean                @default(true)
  productPhoto         String                 @default("/images/products/generic-pickup.jpg") @db.VarChar(1000)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  deleted              Boolean                @default(false)
  serviceLogs          ServiceLog[]
  subscriptionServices SubscriptionServices[]

  @@index([stripeId])
}

model ServiceRequest {
  id                String       @id @default(cuid())
  type              ServiceType
  billingCycleId    String
  addressId         String
  requestDate       DateTime
  providerId        String?
  providersNotified Boolean      @default(false)
  claimed           Boolean      @default(false)
  completed         Boolean      @default(false)
  instructions      String?      @db.VarChar(2000)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  deleted           Boolean      @default(false)
  billingCycle      BillingCycle @relation(fields: [billingCycleId], references: [id], onDelete: Cascade)
  address           Address      @relation(fields: [addressId], references: [id], onDelete: Cascade)
  provider          Provider?    @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@index([billingCycleId])
  @@index([addressId])
  @@index([providerId])
}

model ServiceLog {
  id             String       @id @default(cuid())
  serviceId      String
  billingCycleId String
  addressId      String
  providerId     String
  notes          String?      @db.VarChar(2000)
  photo          String?
  completed      Boolean      @default(false)
  notified       Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deleted        Boolean      @default(false)
  service        Service      @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  billingCycle   BillingCycle @relation(fields: [billingCycleId], references: [id], onDelete: Cascade)
  address        Address      @relation(fields: [addressId], references: [id], onDelete: Cascade)
  provider       Provider     @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@index([serviceId])
  @@index([billingCycleId])
  @@index([addressId])
  @@index([providerId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Subscription {
  id              String                 @id @default(cuid())
  status          SubscriptionStatus
  userId          String
  stripeId        String                 @unique @db.VarChar(40)
  amount          Float?
  pickupsPerCycle Int                    @default(1)
  cycleRecurrence Recurrence             @default(monthly)
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  deleted         Boolean                @default(false)
  user            User                   @relation(fields: [userId], references: [id], onDelete: NoAction)
  services        SubscriptionServices[]

  @@index([userId])
  @@index([stripeId])
}

model SubscriptionServices {
  subscriptionId String
  serviceId      String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deleted        Boolean      @default(false)
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  service        Service      @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@id([subscriptionId, serviceId])
  @@index([subscriptionId])
  @@index([serviceId])
}

model User {
  id                String             @id @default(cuid())
  name              String?
  email             String?            @unique
  emailVerified     DateTime?
  phone             String?
  image             String?
  role              RoleEnum           @default(subscriber)
  billingAddressId  String?            @unique @db.VarChar(30)
  stripeId          String?            @db.VarChar(30)
  deleted           Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt
  accounts          Account[]
  addresses         Address[]          @relation("addressUser")
  billingCycle      BillingCycle?
  payments          Payment[]
  sessions          Session[]
  subscriptions     Subscription[]
  paymentMethods    PaymentMethod[]
  billingAddress    Address?           @relation("billingAddress", fields: [billingAddressId], references: [id])
  Provider          Provider[]
  PickupPreferences PickupPreference[]
  PickupSchedule    PickupSchedule[]

  @@index([id, name, email])
  @@index([stripeId])
}

model PaymentMethod {
  id        String    @id @default(cuid())
  userId    String
  stripeId  String    @unique
  last4     String?
  expMonth  Int?
  expYear   Int?
  brand     String?
  default   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   Boolean   @default(false)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments  Payment[]

  @@index([userId])
  @@index([stripeId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ServiceType {
  pickup_recurring
  pickup_one_time
  addOn
}

enum RoleEnum {
  subscriber
  provider
  admin
  superadmin
}

enum Recurrence {
  daily
  weekly
  monthly
  annually
}

enum AddressType {
  billing
  service
  provider
}

enum Weekday {
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday
  sunday
}

enum SubscriptionStatus {
  active
  canceled
  incomplete
  incomplete_expired
  past_due
  trialing
  unpaid
}
